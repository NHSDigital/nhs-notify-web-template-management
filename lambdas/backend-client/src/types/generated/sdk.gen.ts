// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetV1TemplateByTemplateIdData, GetV1TemplateByTemplateIdResponse, GetV1TemplateByTemplateIdError, PostV1TemplateByTemplateIdData, PostV1TemplateByTemplateIdResponse, PostV1TemplateByTemplateIdError, PostV1TemplateData, PostV1TemplateResponse, PostV1TemplateError, GetV1TemplatesData, GetV1TemplatesResponse, GetV1TemplatesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get a template
 * Get a template template by Id
 */
export const getV1TemplateByTemplateId = <ThrowOnError extends boolean = false>(options: Options<GetV1TemplateByTemplateIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1TemplateByTemplateIdResponse, GetV1TemplateByTemplateIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/v1/template/{templateId}',
        ...options
    });
};

/**
 * Update a template
 * Update a template template by Id
 */
export const postV1TemplateByTemplateId = <ThrowOnError extends boolean = false>(options: Options<PostV1TemplateByTemplateIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1TemplateByTemplateIdResponse, PostV1TemplateByTemplateIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/v1/template/{templateId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a template
 * Create a template
 */
export const postV1Template = <ThrowOnError extends boolean = false>(options: Options<PostV1TemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1TemplateResponse, PostV1TemplateError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/v1/template',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all templates
 * List all templates
 */
export const getV1Templates = <ThrowOnError extends boolean = false>(options?: Options<GetV1TemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV1TemplatesResponse, GetV1TemplatesError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/v1/templates',
        ...options
    });
};