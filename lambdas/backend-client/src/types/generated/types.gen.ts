// This file is auto-generated by @hey-api/openapi-ts

export type BaseCreatedTemplate = BaseTemplate & {
  campaignId?: string;
  clientId?: string;
  createdAt: string;
  createdBy?: string;
  id: string;
  templateStatus: TemplateStatus;
  updatedAt: string;
  updatedBy?: string;
};

export type BaseLetterTemplateProperties = {
  files?: LetterFiles;
  language: Language;
  letterType: LetterType;
  templateType: 'LETTER';
};

export type BaseTemplate = {
  name: string;
};

export type CascadeGroup =
  | CascadeGroupAccessible
  | CascadeGroupTranslations
  | CascadeGroupStandard;

export type CascadeGroupAccessible = CascadeGroupBase & {
  accessibleFormat: Array<LetterType>;
  name?: 'accessible';
};

export type CascadeGroupBase = {
  name: CascadeGroupName;
};

export type CascadeGroupName = 'accessible' | 'standard' | 'translations';

export type CascadeGroupStandard = CascadeGroupBase & {
  name?: 'standard';
};

export type CascadeGroupTranslations = CascadeGroupBase & {
  language: Array<Language>;
  name?: 'translations';
};

export type CascadeItem = CascadeItemWithDefault | CascadeItemWithConditional;

export type CascadeItemBase = {
  cascadeGroups: Array<CascadeGroupName>;
  channel: Channel;
  channelType: ChannelType;
};

export type CascadeItemWithConditional = CascadeItemBase & {
  conditionalTemplates: Array<
    ConditionalTemplateLanguage | ConditionalTemplateAccessible
  >;
};

export type CascadeItemWithDefault = CascadeItemBase & {
  defaultTemplateId: string;
};

export type Channel = 'EMAIL' | 'LETTER' | 'NHSAPP' | 'SMS';

export type ChannelType = 'primary' | 'secondary';

export type ClientConfiguration = {
  /**
   * @deprecated
   */
  campaignId?: string;
  campaignIds?: Array<string>;
  features: ClientFeatures;
};

export type ClientConfigurationSuccess = {
  clientConfiguration: ClientConfiguration;
  statusCode: number;
};

export type ClientFeatures = {
  proofing?: boolean;
  routing?: boolean;
};

export type ConditionalTemplateAccessible = {
  accessibleFormat: LetterType;
  templateId: string;
};

export type ConditionalTemplateLanguage = {
  language: Language;
  templateId: string;
};

export type CountSuccess = {
  data: {
    count: number;
  };
  statusCode: number;
};

export type CreateUpdateRoutingConfig = {
  campaignId: string;
  cascade: Array<CascadeItem>;
  cascadeGroupOverrides: Array<CascadeGroup>;
  name: string;
};

export type CreateUpdateTemplate = BaseTemplate &
  (SmsProperties | EmailProperties | NhsAppProperties | UploadLetterProperties);

export type EmailProperties = {
  message: string;
  subject: string;
  templateType: 'EMAIL';
};

export type Failure = {
  details?: unknown;
  statusCode: number;
  technicalMessage: string;
};

export type Language =
  | 'ar'
  | 'bg'
  | 'bn'
  | 'de'
  | 'el'
  | 'en'
  | 'es'
  | 'fa'
  | 'fr'
  | 'gu'
  | 'hi'
  | 'hu'
  | 'it'
  | 'ku'
  | 'lt'
  | 'lv'
  | 'ne'
  | 'pa'
  | 'pl'
  | 'pt'
  | 'ro'
  | 'ru'
  | 'sk'
  | 'so'
  | 'sq'
  | 'ta'
  | 'tr'
  | 'ur'
  | 'zh';

export type LetterFiles = {
  pdfTemplate: VersionedFileDetails;
  proofs?: {
    [key: string]: ProofFileDetails;
  };
  testDataCsv?: VersionedFileDetails;
};

export type LetterProperties = BaseLetterTemplateProperties & {
  files: LetterFiles;
  personalisationParameters?: Array<string>;
  proofingEnabled?: boolean;
  supplierReferences?: {
    [key: string]: string;
  };
};

export type LetterType = 'q4' | 'x0' | 'x1';

export type NhsAppProperties = {
  message: string;
  templateType: 'NHS_APP';
};

export type ProofFileDetails = {
  fileName: string;
  supplier: string;
  virusScanStatus: VirusScanStatus;
};

export type RoutingConfig = {
  campaignId: string;
  cascade: Array<CascadeItem>;
  cascadeGroupOverrides: Array<CascadeGroup>;
  clientId: string;
  createdAt: string;
  id: string;
  name: string;
  status: RoutingConfigStatus;
  updatedAt: string;
};

export type RoutingConfigStatus = RoutingConfigStatusActive | 'DELETED';

export type RoutingConfigStatusActive = 'COMPLETED' | 'DRAFT';

export type RoutingConfigSuccess = {
  data: RoutingConfig;
  statusCode: number;
};

export type RoutingConfigSuccessList = {
  data: Array<RoutingConfig>;
  statusCode: number;
};

export type SmsProperties = {
  message: string;
  templateType: 'SMS';
};

export type TemplateDto = BaseCreatedTemplate &
  (SmsProperties | EmailProperties | NhsAppProperties | LetterProperties);

export type TemplateStatus =
  | 'DELETED'
  | 'NOT_YET_SUBMITTED'
  | 'PENDING_PROOF_REQUEST'
  | 'PENDING_UPLOAD'
  | 'PENDING_VALIDATION'
  | 'SUBMITTED'
  | 'VALIDATION_FAILED'
  | 'VIRUS_SCAN_FAILED'
  | 'WAITING_FOR_PROOF'
  | 'PROOF_AVAILABLE';

export type TemplateSuccess = {
  data: TemplateDto;
  statusCode: number;
};

export type TemplateSuccessList = {
  data: Array<TemplateDto>;
  statusCode: number;
};

export type TemplateType = 'NHS_APP' | 'EMAIL' | 'SMS' | 'LETTER';

export type UploadLetterProperties = BaseLetterTemplateProperties & {
  campaignId: string;
};

export type VersionedFileDetails = {
  currentVersion: string;
  fileName: string;
  virusScanStatus: VirusScanStatus;
};

export type VirusScanStatus = 'PENDING' | 'FAILED' | 'PASSED';

export type GetV1ClientConfigurationData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/client-configuration';
};

export type GetV1ClientConfigurationErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type GetV1ClientConfigurationError =
  GetV1ClientConfigurationErrors[keyof GetV1ClientConfigurationErrors];

export type GetV1ClientConfigurationResponses = {
  /**
   * 200 response
   */
  200: ClientConfigurationSuccess;
};

export type GetV1ClientConfigurationResponse =
  GetV1ClientConfigurationResponses[keyof GetV1ClientConfigurationResponses];

export type PostV1LetterTemplateData = {
  /**
   * Letter template to create
   */
  body: unknown;
  path?: never;
  query?: never;
  url: '/v1/letter-template';
};

export type PostV1LetterTemplateErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PostV1LetterTemplateError =
  PostV1LetterTemplateErrors[keyof PostV1LetterTemplateErrors];

export type PostV1LetterTemplateResponses = {
  /**
   * 201 response
   */
  201: TemplateSuccess;
};

export type PostV1LetterTemplateResponse =
  PostV1LetterTemplateResponses[keyof PostV1LetterTemplateResponses];

export type PostV1RoutingConfigurationData = {
  /**
   * Routing configuration to create
   */
  body: CreateUpdateRoutingConfig;
  path?: never;
  query?: never;
  url: '/v1/routing-configuration';
};

export type PostV1RoutingConfigurationErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PostV1RoutingConfigurationError =
  PostV1RoutingConfigurationErrors[keyof PostV1RoutingConfigurationErrors];

export type PostV1RoutingConfigurationResponses = {
  /**
   * 201 response
   */
  201: RoutingConfigSuccess;
};

export type PostV1RoutingConfigurationResponse =
  PostV1RoutingConfigurationResponses[keyof PostV1RoutingConfigurationResponses];

export type GetV1RoutingConfigurationByRoutingConfigIdData = {
  body?: never;
  path: {
    /**
     * ID of routing configuration to return
     */
    routingConfigId: string;
  };
  query?: never;
  url: '/v1/routing-configuration/{routingConfigId}';
};

export type GetV1RoutingConfigurationByRoutingConfigIdErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type GetV1RoutingConfigurationByRoutingConfigIdError =
  GetV1RoutingConfigurationByRoutingConfigIdErrors[keyof GetV1RoutingConfigurationByRoutingConfigIdErrors];

export type GetV1RoutingConfigurationByRoutingConfigIdResponses = {
  /**
   * 200 response
   */
  200: RoutingConfigSuccess;
};

export type GetV1RoutingConfigurationByRoutingConfigIdResponse =
  GetV1RoutingConfigurationByRoutingConfigIdResponses[keyof GetV1RoutingConfigurationByRoutingConfigIdResponses];

export type PutV1RoutingConfigurationByRoutingConfigIdData = {
  /**
   * Routing configuration update to apply
   */
  body: CreateUpdateRoutingConfig;
  path: {
    /**
     * ID of routing configuration to update
     */
    routingConfigId: string;
  };
  query?: never;
  url: '/v1/routing-configuration/{routingConfigId}';
};

export type PutV1RoutingConfigurationByRoutingConfigIdErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PutV1RoutingConfigurationByRoutingConfigIdError =
  PutV1RoutingConfigurationByRoutingConfigIdErrors[keyof PutV1RoutingConfigurationByRoutingConfigIdErrors];

export type PutV1RoutingConfigurationByRoutingConfigIdResponses = {
  /**
   * 200 response
   */
  200: RoutingConfigSuccess;
};

export type PutV1RoutingConfigurationByRoutingConfigIdResponse =
  PutV1RoutingConfigurationByRoutingConfigIdResponses[keyof PutV1RoutingConfigurationByRoutingConfigIdResponses];

export type PatchV1RoutingConfigurationByRoutingConfigIdSubmitData = {
  body?: never;
  path: {
    /**
     * ID of routing configuration to finalise
     */
    routingConfigId: string;
  };
  query?: never;
  url: '/v1/routing-configuration/{routingConfigId}/submit';
};

export type PatchV1RoutingConfigurationByRoutingConfigIdSubmitErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PatchV1RoutingConfigurationByRoutingConfigIdSubmitError =
  PatchV1RoutingConfigurationByRoutingConfigIdSubmitErrors[keyof PatchV1RoutingConfigurationByRoutingConfigIdSubmitErrors];

export type PatchV1RoutingConfigurationByRoutingConfigIdSubmitResponses = {
  /**
   * 200 response
   */
  200: RoutingConfigSuccess;
};

export type PatchV1RoutingConfigurationByRoutingConfigIdSubmitResponse =
  PatchV1RoutingConfigurationByRoutingConfigIdSubmitResponses[keyof PatchV1RoutingConfigurationByRoutingConfigIdSubmitResponses];

export type GetV1RoutingConfigurationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by a single active status
     */
    status?: RoutingConfigStatusActive;
  };
  url: '/v1/routing-configurations';
};

export type GetV1RoutingConfigurationsErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type GetV1RoutingConfigurationsError =
  GetV1RoutingConfigurationsErrors[keyof GetV1RoutingConfigurationsErrors];

export type GetV1RoutingConfigurationsResponses = {
  /**
   * 200 response
   */
  200: RoutingConfigSuccessList;
};

export type GetV1RoutingConfigurationsResponse =
  GetV1RoutingConfigurationsResponses[keyof GetV1RoutingConfigurationsResponses];

export type GetV1RoutingConfigurationsCountData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by a single active status
     */
    status?: RoutingConfigStatusActive;
  };
  url: '/v1/routing-configurations/count';
};

export type GetV1RoutingConfigurationsCountErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type GetV1RoutingConfigurationsCountError =
  GetV1RoutingConfigurationsCountErrors[keyof GetV1RoutingConfigurationsCountErrors];

export type GetV1RoutingConfigurationsCountResponses = {
  /**
   * 200 response
   */
  200: CountSuccess;
};

export type GetV1RoutingConfigurationsCountResponse =
  GetV1RoutingConfigurationsCountResponses[keyof GetV1RoutingConfigurationsCountResponses];

export type PostV1TemplateData = {
  /**
   * Template to create
   */
  body: CreateUpdateTemplate;
  path?: never;
  query?: never;
  url: '/v1/template';
};

export type PostV1TemplateErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PostV1TemplateError =
  PostV1TemplateErrors[keyof PostV1TemplateErrors];

export type PostV1TemplateResponses = {
  /**
   * 201 response
   */
  201: TemplateSuccess;
};

export type PostV1TemplateResponse =
  PostV1TemplateResponses[keyof PostV1TemplateResponses];

export type DeleteV1TemplateByTemplateIdData = {
  body?: never;
  path: {
    /**
     * ID of template to update
     */
    templateId: string;
  };
  query?: never;
  url: '/v1/template/{templateId}';
};

export type DeleteV1TemplateByTemplateIdErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type DeleteV1TemplateByTemplateIdError =
  DeleteV1TemplateByTemplateIdErrors[keyof DeleteV1TemplateByTemplateIdErrors];

export type DeleteV1TemplateByTemplateIdResponses = {
  /**
   * 200 response
   */
  200: TemplateSuccess;
};

export type DeleteV1TemplateByTemplateIdResponse =
  DeleteV1TemplateByTemplateIdResponses[keyof DeleteV1TemplateByTemplateIdResponses];

export type GetV1TemplateByTemplateIdData = {
  body?: never;
  path: {
    /**
     * ID of template to return
     */
    templateId: string;
  };
  query?: never;
  url: '/v1/template/{templateId}';
};

export type GetV1TemplateByTemplateIdErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type GetV1TemplateByTemplateIdError =
  GetV1TemplateByTemplateIdErrors[keyof GetV1TemplateByTemplateIdErrors];

export type GetV1TemplateByTemplateIdResponses = {
  /**
   * 200 response
   */
  200: TemplateSuccess;
};

export type GetV1TemplateByTemplateIdResponse =
  GetV1TemplateByTemplateIdResponses[keyof GetV1TemplateByTemplateIdResponses];

export type PutV1TemplateByTemplateIdData = {
  /**
   * Template to update
   */
  body: CreateUpdateTemplate;
  path: {
    /**
     * ID of template to update
     */
    templateId: string;
  };
  query?: never;
  url: '/v1/template/{templateId}';
};

export type PutV1TemplateByTemplateIdErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PutV1TemplateByTemplateIdError =
  PutV1TemplateByTemplateIdErrors[keyof PutV1TemplateByTemplateIdErrors];

export type PutV1TemplateByTemplateIdResponses = {
  /**
   * 200 response
   */
  200: TemplateSuccess;
};

export type PutV1TemplateByTemplateIdResponse =
  PutV1TemplateByTemplateIdResponses[keyof PutV1TemplateByTemplateIdResponses];

export type PostV1TemplateByTemplateIdProofData = {
  body?: never;
  path: {
    /**
     * ID of the template to request a proof of
     */
    templateId: string;
  };
  query?: never;
  url: '/v1/template/{templateId}/proof';
};

export type PostV1TemplateByTemplateIdProofErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PostV1TemplateByTemplateIdProofError =
  PostV1TemplateByTemplateIdProofErrors[keyof PostV1TemplateByTemplateIdProofErrors];

export type PostV1TemplateByTemplateIdProofResponses = {
  /**
   * 200 response
   */
  200: TemplateSuccess;
};

export type PostV1TemplateByTemplateIdProofResponse =
  PostV1TemplateByTemplateIdProofResponses[keyof PostV1TemplateByTemplateIdProofResponses];

export type PatchV1TemplateByTemplateIdSubmitData = {
  body?: never;
  path: {
    /**
     * ID of template to submit
     */
    templateId: string;
  };
  query?: never;
  url: '/v1/template/{templateId}/submit';
};

export type PatchV1TemplateByTemplateIdSubmitErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type PatchV1TemplateByTemplateIdSubmitError =
  PatchV1TemplateByTemplateIdSubmitErrors[keyof PatchV1TemplateByTemplateIdSubmitErrors];

export type PatchV1TemplateByTemplateIdSubmitResponses = {
  /**
   * 200 response
   */
  200: TemplateSuccess;
};

export type PatchV1TemplateByTemplateIdSubmitResponse =
  PatchV1TemplateByTemplateIdSubmitResponses[keyof PatchV1TemplateByTemplateIdSubmitResponses];

export type GetV1TemplatesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/templates';
};

export type GetV1TemplatesErrors = {
  /**
   * Error
   */
  default: Failure;
};

export type GetV1TemplatesError =
  GetV1TemplatesErrors[keyof GetV1TemplatesErrors];

export type GetV1TemplatesResponses = {
  /**
   * 200 response
   */
  200: TemplateSuccessList;
};

export type GetV1TemplatesResponse =
  GetV1TemplatesResponses[keyof GetV1TemplatesResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
