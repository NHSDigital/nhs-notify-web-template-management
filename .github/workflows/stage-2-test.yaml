name: "Test stage"

on:
  workflow_call:
    inputs:
      build_datetime:
        description: "Build datetime, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_timestamp:
        description: "Build timestamp, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_epoch:
        description: "Build epoch, set by the CI/CD pipeline workflow"
        required: true
        type: string
      nodejs_version:
        description: "Node.js version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      python_version:
        description: "Python version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      terraform_version:
        description: "Terraform version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      version:
        description: "Version of the software, set by the CI/CD pipeline workflow"
        required: true
        type: string

env:
  AWS_REGION: eu-west-2
  TERM: xterm-256color

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  check-generated-dependencies:
    name: "Check generated dependencies"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Repo setup"
        run: |
          npm ci
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
          git diff --exit-code
  test-unit:
    name: "Unit tests"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Repo setup"
        run: |
          npm ci
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
      - name: "Run unit test suite"
        run: |
          make test-unit
      - name: "Save the result of fast test suite"
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests
          path: "**/.reports/unit"
          include-hidden-files: true
        if: always()
      - name: "Save the result of code coverage"
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ".reports/lcov.info"
        if: always()
  test-lint:
    name: "Linting"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Repo setup"
        run: |
          npm ci
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
      - name: "Run linting"
        run: |
          make test-lint
  test-typecheck:
    name: "Typecheck"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Repo setup"
        run: |
          npm ci
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
      - name: "Run typecheck"
        run: |
          make test-typecheck
  test-coverage:
    name: "Test coverage"
    needs: [test-unit]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Run test coverage check"
        run: |
          make test-coverage
      - name: "Save the coverage check result"
        run: |
          echo "Nothing to save"
  perform-static-analysis:
    name: "Perform static analysis"
    needs: [test-unit]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history is needed to improving relevancy of reporting
      - name: "Download coverage report for SONAR"
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report
      - name: "Perform static analysis"
        uses: ./.github/actions/perform-static-analysis
        with:
          sonar_organisation_key: "${{ vars.SONAR_ORGANISATION_KEY }}"
          sonar_project_key: "${{ vars.SONAR_PROJECT_KEY }}"
          sonar_token: "${{ secrets.SONAR_TOKEN }}"

  consumer-contracts:
    name: Consumer Contract Tests
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ASSUME_ROLE_NAME }}
          role-session-name: templates-ci-contract-tests
          aws-region: ${{ env.AWS_REGION }}

      - name: Run consumer contract tests
        run: npm run test:contracts:consumer

      - name: Upload consumer Pact files
        run: |
          export PACT_BUCKET="nhs-notify-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}-main-acct-artefacts"
          npm run test:contracts:upload:consumer

      - name: Upload Pact contracts as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: consumer-pacts
          path: tests/contracts/tests/*/consumer/pacts/*.json
          if-no-files-found: warn

  provider-contracts:
    name: Provider Contract Tests
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ASSUME_ROLE_NAME }}
          role-session-name: templates-ci-contract-tests
          aws-region: ${{ env.AWS_REGION }}

      - name: Download consumer generated Pact files and run provider contract tests
        run: |
          export PACT_BUCKET="nhs-notify-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}-main-acct-artefacts"
          npm run test:contracts:provider:ci
