name: "Test stage"

on:
  workflow_call:
    inputs:
      build_datetime:
        description: "Build datetime, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_timestamp:
        description: "Build timestamp, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_epoch:
        description: "Build epoch, set by the CI/CD pipeline workflow"
        required: true
        type: string
      nodejs_version:
        description: "Node.js version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      python_version:
        description: "Python version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      terraform_version:
        description: "Terraform version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      version:
        description: "Version of the software, set by the CI/CD pipeline workflow"
        required: true
        type: string

env:
  AWS_REGION: eu-west-2
  TERM: xterm-256color

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  install-dependencies:
    name: "Install dependencies"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5.0.0
      - name: "Restore node_modules from cache"
        uses: ./.github/actions/node-modules-cache
        with:
          node_version: "${{ inputs.nodejs_version }}"
          skip_restore: true

  discover-workspaces:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-workspaces.outputs.matrix }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5.0.0
      - name: "Get workspaces"
        id: "get-workspaces"
        run: |
          echo "matrix=$(jq -c '.workspaces' package.json)" >> "$GITHUB_OUTPUT"

  check-generated-dependencies:
    name: "Check generated dependencies"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [install-dependencies]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5.0.0
      - name: "Restore node_modules from cache"
        uses: ./.github/actions/node-modules-cache
        with:
          node_version: "${{ inputs.nodejs_version }}"
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
          git diff --exit-code

  test-unit:
    name: "Unit tests"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [install-dependencies, discover-workspaces]
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJSON(needs.discover-workspaces.outputs.matrix) }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5.0.0
      - name: "Restore node_modules from cache"
        uses: ./.github/actions/node-modules-cache
        with:
          node_version: "${{ inputs.nodejs_version }}"
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
      - name: "Run unit test suite"
        run: |
          WORKSPACE=${{ matrix.workspace }} make test-unit
      - name: "Save the result of test suite"
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-${{ matrix.workspace }}
          path: " ${{ matrix.workspace }}/.reports/unit"
          include-hidden-files: true
        if: always()
      - name: "Save the result of code coverage"
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-${{ matrix.workspace }}
          path: "${{ matrix.workspace }}/.reports/unit/coverage/lcov.info"
        if: always()

  merge-coverage:
    name: "Merge coverage"
    runs-on: ubuntu-latest
    needs: [test-unit]
    steps:
      - uses: actions/checkout@v5

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: code-coverage-*
          merge-multiple: false
          path: ./_cov_parts

      - name: Merge LCOV files
        run: |
          set -euo pipefail
          mkdir -p .reports
          npx --yes lcov-result-merger \
            "./_cov_parts/**/lcov.info" \
            ".reports/lcov.info" \
            --ignore "node_modules" \
            --prepend-source-files

      - name: Upload merged LCOV
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-merged
          path: .reports/lcov.info

  test-lint:
    name: "Linting"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [install-dependencies]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5.0.0
      - name: "Restore node_modules from cache"
        uses: ./.github/actions/node-modules-cache
        with:
          node_version: "${{ inputs.nodejs_version }}"
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
      - name: "Run linting"
        run: |
          make test-lint

  test-typecheck:
    name: "Typecheck"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [install-dependencies]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5.0.0
      - name: "Restore node_modules from cache"
        uses: ./.github/actions/node-modules-cache
        with:
          node_version: "${{ inputs.nodejs_version }}"
      - name: "Generate dependencies"
        run: |
          npm run generate-dependencies --workspaces --if-present
      - name: "Run typecheck"
        run: |
          make test-typecheck

  perform-static-analysis:
    name: "Perform static analysis"
    needs: [test-unit]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0 # Full history is needed to improving relevancy of reporting
      - name: "Download coverage report for SONAR"
        uses: actions/download-artifact@v5
        with:
          name: code-coverage-report
      - name: "Perform static analysis"
        uses: ./.github/actions/perform-static-analysis
        with:
          sonar_organisation_key: "${{ vars.SONAR_ORGANISATION_KEY }}"
          sonar_project_key: "${{ vars.SONAR_PROJECT_KEY }}"
          sonar_token: "${{ secrets.SONAR_TOKEN }}"
