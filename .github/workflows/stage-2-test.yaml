name: 'Test stage'

on:
  workflow_call:
    inputs:
      build_datetime:
        description: 'Build datetime, set by the CI/CD pipeline workflow'
        required: true
        type: string
      build_timestamp:
        description: 'Build timestamp, set by the CI/CD pipeline workflow'
        required: true
        type: string
      build_epoch:
        description: 'Build epoch, set by the CI/CD pipeline workflow'
        required: true
        type: string
      nodejs_version:
        description: 'Node.js version, set by the CI/CD pipeline workflow'
        required: true
        type: string
      python_version:
        description: 'Python version, set by the CI/CD pipeline workflow'
        required: true
        type: string
      terraform_version:
        description: 'Terraform version, set by the CI/CD pipeline workflow'
        required: true
        type: string
      version:
        description: 'Version of the software, set by the CI/CD pipeline workflow'
        required: true
        type: string

env:
  AWS_REGION: eu-west-2
  TERM: xterm-256color

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  setup-dependencies:
    name: 'Setup dependencies'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.cache-nodemodules.outputs.cache-hit }}
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5.0.0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodejs_version }}
          cache: 'npm'

      - name: 'Cache node_modules'
        id: cache-nodemodules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ inputs.nodejs_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ inputs.nodejs_version }}-
            ${{ runner.os }}-node-modules-

      - name: 'Install dependencies'
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci
  check-generated-dependencies:
    name: 'Check generated dependencies'
    needs: [setup-dependencies]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5.0.0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodejs_version }}

      - name: 'Restore dependencies'
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-full-setup-${{ inputs.nodejs_version }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: 'Generate dependencies'
        run: |
          npm run generate-dependencies --workspaces --if-present
          git diff --exit-code
  test-unit:
    name: 'Unit tests'
    needs: [setup-dependencies]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5.0.0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodejs_version }}

      - name: 'Restore dependencies'
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-full-setup-${{ inputs.nodejs_version }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: 'Generate dependencies'
        run: |
          npm run generate-dependencies --workspaces --if-present

      - name: 'Run unit test suite'
        run: |
          make test-unit

      - name: 'Save the result of fast test suite'
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests
          path: '**/.reports/unit'
          include-hidden-files: true
        if: always()

      - name: 'Save the result of code coverage'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: '.reports/lcov.info'
        if: always()
  test-lint:
    name: 'Linting'
    needs: [setup-dependencies]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5.0.0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodejs_version }}

      - name: 'Restore dependencies'
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-full-setup-${{ inputs.nodejs_version }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: 'Generate dependencies'
        run: |
          npm run generate-dependencies --workspaces --if-present

      - name: 'Run linting'
        run: |
          make test-lint
  test-typecheck:
    name: 'Typecheck'
    needs: [setup-dependencies]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5.0.0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodejs_version }}

      - name: 'Restore dependencies'
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-full-setup-${{ inputs.nodejs_version }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: 'Generate dependencies'
        run: |
          npm run generate-dependencies --workspaces --if-present
      - name: 'Run typecheck'
        run: |
          make test-typecheck
  test-coverage:
    name: 'Test coverage'

    needs: [test-unit]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5.0.0
      - name: 'Run test coverage check'
        run: |
          make test-coverage
      - name: 'Save the coverage check result'
        run: |
          echo "Nothing to save"
  perform-static-analysis:
    name: 'Perform static analysis'
    needs: [test-unit]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 5
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0 # Full history is needed to improving relevancy of reporting
      - name: 'Download coverage report for SONAR'
        uses: actions/download-artifact@v5
        with:
          name: code-coverage-report
      - name: 'Perform static analysis'
        uses: ./.github/actions/perform-static-analysis
        with:
          sonar_organisation_key: '${{ vars.SONAR_ORGANISATION_KEY }}'
          sonar_project_key: '${{ vars.SONAR_PROJECT_KEY }}'
          sonar_token: '${{ secrets.SONAR_TOKEN }}'
